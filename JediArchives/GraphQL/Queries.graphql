fragment ListFilmFragment on Film {
  id
  title
  releaseDate
}


query AllFilms {
  # [1] - This statement defines the top level query collection from
  # which you’re requesting data. In this case, allFilms returns,
  # unsurprisingly, all films.

  allFilms {
    # 2 The allFilms collection returns a list of intermediate
    # FilmConnection objects, so here you request the films attribute,
    # which will include a list of actual Film objects.
    
    films {
      # 3 Define the attributes you want to request from each Film object.
      ...ListFilmFragment
    }
  }
}

# 1 In the query definition, unlike AllFilms, FilmDetail takes an
# argument for the film ID. This argument can be referenced anywhere
# within the query and will be automatically included as an argument
# of the initializer in the generated Swift query.

query FilmDetail($id: ID) {

  # 2 Here you specify the film collection and pass the film ID
  # to pull back a single Film object.
  film(id: $id) {

    # 3 As in the previous query, you specify the fields you’d
    # like to fetch from the Film object as part of the query.
    title
    episodeID
    releaseDate
    director

    # 4 Specify you want to include characterConnection,
    # which is a list of related characters appearing in this film.
    # You specify first: 10 to include a max of 10 characters.
    characterConnection(first: 10) {

      # 5 Specify the characters list to get the actual list of characters,
      # as well as the fields you care about for each individual character.
      characters {
        id
        name
      }
    }
  }
}

# Character Details

query CharacterDetail($id: ID) {
  person(id: $id) {
    name
    birthYear
    eyeColor
    gender
    hairColor
    skinColor
    homeworld {
      name
    }
    filmConnection(first: 10) {
      films {
        ...ListFilmFragment
      }
    }
  }
}
